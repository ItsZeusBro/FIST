sometest from FileView
quantality()
true Quantality is evaluated right after positionality for an outgoing transaction
                which means it is only a single value that represents where from
                the start of positionality one wants to extend in the amount of data sent
             Quantality represents the amount of data flowing from file a to file b FistView.quan(tality) ACCEPTS end, mid, percentages (strings), +-*/ ops 
 Example: 1b, 2mb, 14gb, 0.5, 1b, 5% 
 FistView.quan(tality) RETURNS {tality:''} 

0.0005003e600 mb+ 10bin is false
0.0005000e19 b+4b is false
43.0005e3 -12mb +10mb is false
25.0505e-5bin+ 4gb is false
0.0005e6 mb + 10tb is false
0.0005e4 b + 4pb is false
0.0005e9 gb + 10eb is false
0.05 is true
1 is true
100% is true
200% is true
500 is true
5% is true
mid +0.0005003e643 mb is false
mid+0.0005000e-234 b+4b is false
mid-5% is true
beg + 25.0505e-5bin+ 4gb is false
end -0.0005e -634 b + 4pb is false
mid-5% is true
beg+2gb is true
end-4gb is true
end is true
mid is true
beg is true
0.05% is true
end+25.0505e-5bin+ 4gb is false
beg-25.0505e-5bin+ 4gb is false
mid+-25.0505e-5bin+ 4gb is false
clusivity()
true This is evaluated after positionality and quantality provide a begining and end anchor
                we can use beg, mid, and end to denote how much of the outgoing buffer should be shared
                with the original source. This is a colon separated triplet. The first element is the
                clusivity (in or ex), the second is beg or mid anchor expressions, the third is relative
                to the first in the way of a value, or can be anchored by end and used with expressions
             FistView.clus(ivity) ACCEPTS beg, end, mid, percentage strings, +-*/ ops 
 Example: 1b, 2mb, 14gb, etc. (prefixed with in or ex or just in or ex) 
             in:position:offset or in:0.5, or in:1b, or in:end, in:mid, in:beg (for future?) 
             ex:5% 
 FistView.clus(ivity) RETURNS {ivity:'', n:'', m:''}
in:1 is true
in:0.0001 is true
in:1.0e400-34 is true
in:0.001e-34+45 is true
in:0.001e34+45 is true
in:55e-4 is true
in:55e-4-31 is true
in:55e-4+31 is true
in:55e+4+31 is true
in:55e4+31 is true
in:1000bin is true
in:400nib is true
in:20342mb is true
in:342gb is true
in:23424tb is true
in:end is true
in:mid is true
in:beg is true
in:mid-432bin is true
in:mid-432nib is true
in:mid-432mb is true
in:mid-432gb is true
in:mid-432tb is true
in:mid-432eb is true
in:mid+432bin is true
in:mid+432nib is true
in:mid+432mb is true
in:mid+432gb is true
in:mid+432tb is true
in:mid+432eb is true
in:mid/432bin is true
in:mid/432nib is true
in:mid/432mb is true
in:mid/432gb is true
in:mid/432tb is true
in:mid/432eb is true
in:mid*432bin is true
in:mid*432nib is true
in:mid*432mb is true
in:mid*432gb is true
in:mid-432tb is true
in:mid-432eb is true
in:beg is true
in:mid*432tb is true
in:mid*432eb is true
in:mid-432bin is true
in:mid-432nib is true
in:mid-432mb is true
in:mid-432gb is true
in:5% is true
in:0.5 is true
in:0.0001 is true
ex:0.0001 is true
ex:1 is true
ex:0.0001 is true
ex:1.0e400-34 is true
ex:0.001e34+45 is true
ex:0.001e-34+45 is true
ex:55e-4+31 is true
ex:55e-4-31 is true
ex:1000bin is true
ex:400nib is true
ex:20342mb is true
ex:342gb is true
ex:23424tb is true
ex:end is true
ex:mid is true
ex:beg is true
ex:5% is true
ex:0.5 is true
ex:4mb is true
ex:mid-432mb is true
ex:mid-432gb is true
ex:mid-432nib is true
ex:mid+432nib is true
ex:mid+432gb is true
ex:mid+432mb is true
positionality()
true Positionality is evaluated first! It uses the entire file capacity to determine position FistView.position(ality) ACCEPTS beg, end, mid (strings), percentages, +-*/ ops 
 Examples: 1b, 2mb, 14gb, etc. or 0.5, or 100b, or 5% or beg, end, beg+10b, mid-100mb, etc FistView.position(ality) RETURNS {ality:''}
end is true
end-1b is true
end-1mb is true
end-10tb is true
end/5b is true
end/2mb is true
end/46gb is true
end/50tb is true
beg is true
beg+2b is true
beg+3gb is true
beg+4tb is true
beg*5b is true
beg*2mb is true
beg*46gb is true
beg*50tb is true
mid is true
mid+3b is true
mid+10mb is true
mid+1000gb is true
mid+10tb is true
mid-5b is true
mid-100mb is true
mid-100gb is true
mid-10tb is true
mid/5b is true
mid/10mb is true
mid/2gb is true
mid/100tb is true
mid+0.5 is true
end+0.05 is true
beg*0.003 is true
beg/0.0005 is true
mid*0.0000003 is true
mid*0.3e9 is true
beg+0.4e_10 is true
end+4e40 is true
end-30e_3 is true
mid+1e100 is true
mid+2 is true
